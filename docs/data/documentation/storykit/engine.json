{"schemaVersion":{"major":0,"patch":0,"minor":3},"metadata":{"roleHeading":"Article","title":"Engine","modules":[{"name":"StoryKit"}],"role":"article"},"kind":"article","hierarchy":{"paths":[["doc:\/\/StoryKit\/documentation\/StoryKit"]]},"variants":[{"paths":["\/documentation\/storykit\/engine"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"kind":"content","content":[{"level":2,"type":"heading","anchor":"Overview","text":"Overview"},{"inlineContent":[{"text":"The Engine module provides ","type":"text"},{"type":"codeVoice","code":"Engine\/StoryEngine"},{"type":"text","text":" — a Swift "},{"type":"codeVoice","code":"actor"},{"text":" that executes transitions, evaluates predicates, applies effects, and triggers autosave.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"codeVoice","code":"Engine\/StoryEngine"},{"type":"text","text":" is generic over your app’s "},{"type":"codeVoice","code":"Core\/StoryState"},{"type":"text","text":" so you can model state that fits your rules."}],"type":"paragraph"},{"text":"Key Types","level":2,"type":"heading","anchor":"Key-Types"},{"items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"Engine\/StoryEngine"},{"type":"text","text":": The main controller."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"Engine\/EngineError"},{"text":": Errors for unknown nodes\/choices or blocked selections.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"heading","anchor":"Initialization","level":2,"text":"Initialization"},{"inlineContent":[{"type":"text","text":"Initialize the engine with a loaded "},{"type":"codeVoice","code":"Core\/Story"},{"type":"text","text":", your initial state, registries, and an optional autosave handler:"}],"type":"paragraph"},{"type":"codeListing","code":["let engine = StoryEngine(","    story: story,","    initialState: MyState(currentNode: story.start),","    predicateRegistry: preds,","    effectRegistry: effs,","    actionRegistry: acts,","    autosave: { state in try await provider.save(slot: \"autosave\", snapshot: .init(storyID: story.metadata.id, state: state)) }",")"],"syntax":"swift"},{"text":"Flow API","level":2,"type":"heading","anchor":"Flow-API"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"Engine\/StoryEngine\/currentNode()"},{"type":"text","text":": Returns the current node, if available."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"Engine\/StoryEngine\/availableChoices()"},{"text":": Filters choices by evaluating registered predicates.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"Engine\/StoryEngine\/select(choiceID:)"},{"text":": Applies choice effects, transitions to the destination, applies destination on‑enter effects, then invokes autosave.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"Engine\/StoryEngine\/performAction(id:parameters:)"},{"type":"text","text":": Invokes a registered action, allows state mutation, then invokes autosave."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"Engine\/StoryEngine\/performGlobalAction(id:)"},{"type":"text","text":": Transitions to a globally declared action’s destination and applies on‑enter effects, then autosaves."}],"type":"paragraph"}]}]},{"inlineContent":[{"text":"All engine methods are isolated to the actor, ensuring thread safety.","type":"text"}],"type":"paragraph"}]}],"identifier":{"url":"doc:\/\/StoryKit\/documentation\/StoryKit\/Engine","interfaceLanguage":"swift"},"sections":[],"abstract":[{"type":"text","text":"Drive the story forward with the actor‑based runtime."}],"references":{"doc://StoryKit/documentation/StoryKit":{"role":"collection","kind":"symbol","title":"StoryKit","type":"topic","url":"\/documentation\/storykit","identifier":"doc:\/\/StoryKit\/documentation\/StoryKit","abstract":[{"text":"Build rich, data‑driven “choose your own adventure” experiences with a small, composable core and first‑class tooling.","type":"text"}]}}}