{"metadata":{"role":"article","modules":[{"name":"StoryKit"}],"roleHeading":"Article","title":"Encounters and Globals"},"hierarchy":{"paths":[["doc:\/\/StoryKit\/documentation\/StoryKit"]]},"abstract":[{"type":"text","text":"Model multi‑step battles in your app while keeping content data‑only."}],"kind":"article","sections":[],"primaryContentSections":[{"kind":"content","content":[{"anchor":"Goals","type":"heading","text":"Goals","level":2},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Keep "},{"type":"codeVoice","code":"story.json"},{"type":"text","text":" declarative: names\/ids\/tags only — no mechanics."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Let the client run encounters turn‑by‑turn without advancing the engine.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Provide global outcomes (e.g., “player died”) that can transition from anywhere.","type":"text"}],"type":"paragraph"}]}]},{"anchor":"Data-Shape-content","type":"heading","text":"Data Shape (content)","level":2},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Top‑level "},{"type":"codeVoice","code":"entities"},{"type":"text","text":": canonical entities to reference (labels\/tags\/art keys)."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Per‑node ","type":"text"},{"code":"actors","type":"codeVoice"},{"text":": which entities are present at the location.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Top‑level "},{"type":"codeVoice","code":"globals.globalActions"},{"type":"text","text":": global outcomes mapping to destination nodes."}]}]}]},{"code":["{","  \"entities\": { \"goblin\": { \"name\": \"Goblin\", \"tags\": [\"hostile\"] } },","  \"nodes\": {","    \"cellar\": { \"id\": \"cellar\", \"text\": {\"file\":\"t.md\",\"section\":\"cellar\"},","      \"actors\": [ { \"id\": \"g1\", \"ref\": \"goblin\" } ],","      \"choices\": [ { \"id\": \"fight\", \"title\": \"Fight\", \"destination\": \"cellar\" } ]","    }","  },","  \"globals\": { \"globalActions\": { \"playerDied\": { \"destination\": \"fail\" } } }","}"],"syntax":"json","type":"codeListing"},{"anchor":"Minimal-Client-Implementation","level":2,"text":"Minimal Client Implementation","type":"heading"},{"inlineContent":[{"text":"Define state that can hold an encounter sub‑state. Your app controls the rules.","type":"text"}],"type":"paragraph"},{"code":["import StoryKit","","struct EncounterState: Sendable, Codable {","    struct Participant: Sendable, Codable { var id: String; var hp: Int }","    var participants: [Participant]","    var turn: Int = 0","}","","struct GameState: StoryState {","    var currentNode: NodeID","    var activeEncounter: EncounterState? = nil","}","","enum BattleMove { case attack(targetID: String); case defend }"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Register actions that mutate "},{"type":"codeVoice","code":"GameState"},{"type":"text","text":". Return values are for your UI; the engine does not advance nodes."}],"type":"paragraph"},{"code":["var actions = ActionRegistry<GameState>()","","actions.register(\"startEncounter\") { state, params in","    \/\/ Seed from current node's actors (or params). Mechanics are yours.","    guard state.activeEncounter == nil else { return .completed }","    let actorsHere = \/* resolve from story.nodes[state.currentNode].actors *\/ [] as [String]","    state.activeEncounter = EncounterState(","        participants: actorsHere.map { .init(id: $0, hp: 10) }, turn: 0","    )","    return .requiresUserInput(hint: \"encounter-begun\")","}","","actions.register(\"encounterTurn\") { state, params in","    guard var enc = state.activeEncounter else { return .completed }","    \/\/ Decode your move (String params -> your domain).","    let target = params[\"target\"] ?? \"\"","    \/\/ Apply your rules.","    if let i = enc.participants.firstIndex(where: { $0.id == target }) {","        enc.participants[i].hp -= 3","    }","    enc.turn += 1","    state.activeEncounter = enc","    return .requiresUserInput(hint: \"turn-complete\")","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Drive the UI loop while staying on the same node. When a terminal condition happens, trigger a global action."}],"type":"paragraph"},{"code":["let engine = StoryEngine(","    story: story,","    initialState: GameState(currentNode: story.start),","    actionRegistry: actions",")","","\/\/ Start encounter (e.g., on tapping a choice)","_ = try await engine.performAction(id: \"startEncounter\")","","\/\/ Turn loop (UI driven)","while let enc = await engine.state.activeEncounter, enc.participants.contains(where: { $0.hp > 0 }) {","    \/\/ Render UI from state.","    \/\/ On player input, call encounterTurn with parameters.","    _ = try await engine.performAction(id: \"encounterTurn\", parameters: [\"target\": \"g1\"]) \/\/ example","","    \/\/ Check terminal conditions and transition via a global action if needed.","    if \/* player HP <= 0 *\/ false {","        _ = try await engine.performGlobalAction(id: \"playerDied\")","        break","    }","}","","\/\/ On victory, your action\/logic can set flags and then normal choice selection can continue."],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Notes:"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Actions run on the engine actor and autosave (if configured) after each call."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Global actions apply on‑enter effects of their destination and autosave, just like normal transitions.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Encode richer parameters by convention (e.g., JSON in a string) if you need more structure."}],"type":"paragraph"}]}],"type":"unorderedList"}]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/storykit\/encounters"]}],"identifier":{"url":"doc:\/\/StoryKit\/documentation\/StoryKit\/Encounters","interfaceLanguage":"swift"},"references":{"doc://StoryKit/documentation/StoryKit":{"identifier":"doc:\/\/StoryKit\/documentation\/StoryKit","title":"StoryKit","abstract":[{"text":"Build rich, data‑driven “choose your own adventure” experiences with a small, composable core and first‑class tooling.","type":"text"}],"kind":"symbol","role":"collection","type":"topic","url":"\/documentation\/storykit"}}}