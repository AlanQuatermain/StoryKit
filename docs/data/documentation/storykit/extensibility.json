{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/StoryKit\/documentation\/StoryKit\/Extensibility"},"hierarchy":{"paths":[["doc:\/\/StoryKit\/documentation\/StoryKit"]]},"sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/storykit\/extensibility"]}],"metadata":{"role":"article","modules":[{"name":"StoryKit"}],"title":"Extensibility","roleHeading":"Article"},"schemaVersion":{"major":0,"minor":3,"patch":0},"kind":"article","primaryContentSections":[{"kind":"content","content":[{"level":2,"type":"heading","text":"Overview","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"text":"StoryKit separates data from behavior. Authors reference symbolic ids in content; apps register concrete logic at runtime.","type":"text"}]},{"level":2,"type":"heading","text":"Registries","anchor":"Registries"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"PredicateRegistry"},{"type":"text","text":": Register visibility\/eligibility checks. Signature: "},{"type":"codeVoice","code":"@Sendable (State, [String: String]) -> Bool"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"EffectRegistry"},{"type":"text","text":": Register state mutations. Signature: "},{"type":"codeVoice","code":"@Sendable (inout State, [String: String]) -> Void"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"ActionRegistry"},{"type":"text","text":": Register richer interactions that can throw and return an "},{"type":"codeVoice","code":"ActionOutcome"},{"type":"text","text":". Signature: "},{"type":"codeVoice","code":"@Sendable (inout State, [String: String]) throws -> ActionOutcome"},{"type":"text","text":"."}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"text":"Parameters are ","type":"text"},{"type":"codeVoice","code":"String"},{"text":"‑keyed for portability; you can adopt your own encoding\/decoding and look up values by convention.","type":"text"}]},{"level":2,"type":"heading","text":"State","anchor":"State"},{"type":"paragraph","inlineContent":[{"text":"Define a type conforming to ","type":"text"},{"type":"codeVoice","code":"StoryState"},{"text":" to represent your game’s state. Keep it ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Sendable"},{"text":" to work well with autosave and concurrency.","type":"text"}]},{"level":2,"type":"heading","text":"Determinism","anchor":"Determinism"},{"type":"paragraph","inlineContent":[{"text":"For deterministic tests, avoid randomness in registry closures or route any randomness through state so tests can substitute deterministic values.","type":"text"}]},{"level":2,"type":"heading","text":"Encounters and Global Actions","anchor":"Encounters-and-Global-Actions"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Declare who\/what is present using data‑only fields in content: top‑level "},{"type":"codeVoice","code":"entities"},{"type":"text","text":" and per‑node "},{"type":"codeVoice","code":"actors"},{"type":"text","text":". These carry identifiers, labels, and tags — not mechanics."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Drive multi‑step encounters entirely in your client using registered actions that mutate your "},{"type":"codeVoice","code":"StoryState"},{"type":"text","text":". The engine can remain on the same node between turns."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"When an out‑of‑band outcome should transition regardless of the current node (e.g., “player died”), declare a "},{"type":"codeVoice","code":"globals.globalActions"},{"type":"text","text":" entry in content and call "},{"type":"codeVoice","code":"StoryEngine.performGlobalAction(id:)"},{"type":"text","text":" to jump to its destination (on‑enter effects and autosave apply)."}]}]}],"type":"unorderedList"}]}],"abstract":[{"type":"text","text":"Customize logic with predicates, effects, and actions."}],"references":{"doc://StoryKit/documentation/StoryKit":{"identifier":"doc:\/\/StoryKit\/documentation\/StoryKit","title":"StoryKit","type":"topic","kind":"symbol","role":"collection","abstract":[],"url":"\/documentation\/storykit"}}}