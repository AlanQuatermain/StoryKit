{"kind":"article","schemaVersion":{"major":0,"minor":3,"patch":0},"abstract":[{"type":"text","text":"Customize logic with predicates, effects, and actions."}],"metadata":{"title":"Extensibility","roleHeading":"Article","role":"article","modules":[{"name":"StoryKit"}]},"identifier":{"url":"doc:\/\/StoryKit\/documentation\/StoryKit\/Extensibility","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/StoryKit\/documentation\/StoryKit"]]},"sections":[],"primaryContentSections":[{"kind":"content","content":[{"level":2,"anchor":"Overview","type":"heading","text":"Overview"},{"inlineContent":[{"text":"StoryKit separates data from behavior. Authors reference symbolic ids in content; apps register concrete logic at runtime.","type":"text"}],"type":"paragraph"},{"level":2,"anchor":"Registries","type":"heading","text":"Registries"},{"items":[{"content":[{"inlineContent":[{"isActive":true,"type":"reference","identifier":"doc:\/\/StoryKit\/documentation\/StoryKit\/PredicateRegistry"},{"type":"text","text":": Register visibility\/eligibility checks. Signature: "},{"type":"codeVoice","code":"@Sendable (State, [String: String]) -> Bool"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/StoryKit\/documentation\/StoryKit\/EffectRegistry"},{"type":"text","text":": Register state mutations. Signature: "},{"type":"codeVoice","code":"@Sendable (inout State, [String: String]) -> Void"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"doc:\/\/StoryKit\/documentation\/StoryKit\/ActionRegistry"},{"type":"text","text":": Register richer interactions that can throw and return an "},{"isActive":true,"type":"reference","identifier":"doc:\/\/StoryKit\/documentation\/StoryKit\/ActionOutcome"},{"type":"text","text":". Signature: "},{"type":"codeVoice","code":"@Sendable (inout State, [String: String]) throws -> ActionOutcome"},{"type":"text","text":"."}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"text":"Parameters are ","type":"text"},{"type":"codeVoice","code":"String"},{"text":"‑keyed for portability; you can adopt your own encoding\/decoding and look up values by convention.","type":"text"}]},{"type":"heading","anchor":"State","level":2,"text":"State"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Define a type conforming to "},{"type":"reference","identifier":"doc:\/\/StoryKit\/documentation\/StoryKit\/StoryState","isActive":true},{"type":"text","text":" to represent your game’s state. Keep it "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" and "},{"code":"Sendable","type":"codeVoice"},{"type":"text","text":" to work well with autosave and concurrency."}]},{"type":"heading","anchor":"Determinism","level":2,"text":"Determinism"},{"type":"paragraph","inlineContent":[{"text":"For deterministic tests, avoid randomness in registry closures or route any randomness through state so tests can substitute deterministic values.","type":"text"}]},{"type":"heading","anchor":"Encounters-and-Global-Actions","level":2,"text":"Encounters and Global Actions"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Declare who\/what is present using data‑only fields in content: top‑level ","type":"text"},{"code":"entities","type":"codeVoice"},{"text":" and per‑node ","type":"text"},{"code":"actors","type":"codeVoice"},{"text":". These carry identifiers, labels, and tags — not mechanics.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Drive multi‑step encounters entirely in your client using registered actions that mutate your "},{"isActive":true,"type":"reference","identifier":"doc:\/\/StoryKit\/documentation\/StoryKit\/StoryState"},{"type":"text","text":". The engine can remain on the same node between turns."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"When an out‑of‑band outcome should transition regardless of the current node (e.g., “player died”), declare a "},{"type":"codeVoice","code":"globals.globalActions"},{"type":"text","text":" entry in content and call "},{"code":"StoryEngine.performGlobalAction(id:)","type":"codeVoice"},{"text":" to jump to its destination (on‑enter effects and autosave apply).","type":"text"}],"type":"paragraph"}]}]}]}],"variants":[{"paths":["\/documentation\/storykit\/extensibility"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://StoryKit/documentation/StoryKit/PredicateRegistry":{"url":"\/documentation\/storykit\/predicateregistry","identifier":"doc:\/\/StoryKit\/documentation\/StoryKit\/PredicateRegistry","type":"topic","role":"symbol","abstract":[{"text":"Registry that maps predicate ids to evaluation closures.","type":"text"}],"title":"PredicateRegistry","navigatorTitle":[{"kind":"identifier","text":"PredicateRegistry"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"PredicateRegistry"}]},"doc://StoryKit/documentation/StoryKit/ActionRegistry":{"kind":"symbol","url":"\/documentation\/storykit\/actionregistry","type":"topic","title":"ActionRegistry","role":"symbol","abstract":[{"type":"text","text":"Registry that maps action ids to action closures."}],"identifier":"doc:\/\/StoryKit\/documentation\/StoryKit\/ActionRegistry","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ActionRegistry"}],"navigatorTitle":[{"kind":"identifier","text":"ActionRegistry"}]},"doc://StoryKit/documentation/StoryKit/EffectRegistry":{"kind":"symbol","title":"EffectRegistry","type":"topic","url":"\/documentation\/storykit\/effectregistry","role":"symbol","abstract":[{"text":"Registry that maps effect ids to mutation closures.","type":"text"}],"identifier":"doc:\/\/StoryKit\/documentation\/StoryKit\/EffectRegistry","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EffectRegistry","kind":"identifier"}],"navigatorTitle":[{"text":"EffectRegistry","kind":"identifier"}]},"doc://StoryKit/documentation/StoryKit/StoryState":{"type":"topic","identifier":"doc:\/\/StoryKit\/documentation\/StoryKit\/StoryState","title":"StoryState","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"StoryState","kind":"identifier"}],"url":"\/documentation\/storykit\/storystate","kind":"symbol","role":"symbol","navigatorTitle":[{"text":"StoryState","kind":"identifier"}],"abstract":[{"type":"text","text":"App-defined, codable story state used by the engine."}]},"doc://StoryKit/documentation/StoryKit":{"role":"collection","identifier":"doc:\/\/StoryKit\/documentation\/StoryKit","type":"topic","abstract":[{"text":"Build rich, data‑driven “choose your own adventure” experiences with a small, composable core and first‑class tooling.","type":"text"}],"title":"StoryKit","kind":"symbol","url":"\/documentation\/storykit"},"doc://StoryKit/documentation/StoryKit/ActionOutcome":{"navigatorTitle":[{"text":"ActionOutcome","kind":"identifier"}],"identifier":"doc:\/\/StoryKit\/documentation\/StoryKit\/ActionOutcome","kind":"symbol","abstract":[{"type":"text","text":"Outcome of a performed action."}],"role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ActionOutcome","kind":"identifier"}],"type":"topic","title":"ActionOutcome","url":"\/documentation\/storykit\/actionoutcome"}}}