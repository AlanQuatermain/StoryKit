{"kind":"article","hierarchy":{"paths":[["doc:\/\/StoryKit\/documentation\/StoryKit"]]},"abstract":[{"text":"Customize logic with predicates, effects, and actions.","type":"text"}],"metadata":{"modules":[{"name":"StoryKit"}],"title":"Extensibility","role":"article","roleHeading":"Article"},"schemaVersion":{"patch":0,"major":0,"minor":3},"primaryContentSections":[{"content":[{"level":2,"text":"Overview","type":"heading","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"text":"StoryKit separates data from behavior. Authors reference symbolic ids in content; apps register concrete logic at runtime.","type":"text"}]},{"level":2,"text":"Registries","type":"heading","anchor":"Registries"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"doc:\/\/StoryKit\/documentation\/StoryKit\/PredicateRegistry"},{"text":": Register visibility\/eligibility checks. Signature: ","type":"text"},{"type":"codeVoice","code":"@Sendable (State, [String: String]) -> Bool"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"doc:\/\/StoryKit\/documentation\/StoryKit\/EffectRegistry"},{"type":"text","text":": Register state mutations. Signature: "},{"code":"@Sendable (inout State, [String: String]) -> Void","type":"codeVoice"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"isActive":true,"type":"reference","identifier":"doc:\/\/StoryKit\/documentation\/StoryKit\/ActionRegistry"},{"text":": Register richer interactions that can throw and return an ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/StoryKit\/documentation\/StoryKit\/ActionOutcome"},{"type":"text","text":". Signature: "},{"type":"codeVoice","code":"@Sendable (inout State, [String: String]) throws -> ActionOutcome"},{"type":"text","text":"."}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Parameters are "},{"type":"codeVoice","code":"String"},{"type":"text","text":"‑keyed for portability; you can adopt your own encoding\/decoding and look up values by convention."}]},{"level":2,"type":"heading","text":"State","anchor":"State"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Define a type conforming to "},{"type":"reference","identifier":"doc:\/\/StoryKit\/documentation\/StoryKit\/StoryState","isActive":true},{"type":"text","text":" to represent your game’s state. Keep it "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":" to work well with autosave and concurrency."}]},{"level":2,"type":"heading","text":"Determinism","anchor":"Determinism"},{"type":"paragraph","inlineContent":[{"text":"For deterministic tests, avoid randomness in registry closures or route any randomness through state so tests can substitute deterministic values.","type":"text"}]},{"level":2,"type":"heading","text":"Encounters and Global Actions","anchor":"Encounters-and-Global-Actions"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Declare who\/what is present using data‑only fields in content: top‑level "},{"type":"codeVoice","code":"entities"},{"type":"text","text":" and per‑node "},{"type":"codeVoice","code":"actors"},{"type":"text","text":". These carry identifiers, labels, and tags — not mechanics."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Drive multi‑step encounters entirely in your client using registered actions that mutate your ","type":"text"},{"identifier":"doc:\/\/StoryKit\/documentation\/StoryKit\/StoryState","isActive":true,"type":"reference"},{"type":"text","text":". The engine can remain on the same node between turns."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"When an out‑of‑band outcome should transition regardless of the current node (e.g., “player died”), declare a ","type":"text"},{"type":"codeVoice","code":"globals.globalActions"},{"type":"text","text":" entry in content and call "},{"type":"codeVoice","code":"StoryEngine.performGlobalAction(id:)"},{"type":"text","text":" to jump to its destination (on‑enter effects and autosave apply)."}]}]}]}],"kind":"content"}],"variants":[{"paths":["\/documentation\/storykit\/extensibility"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/StoryKit\/documentation\/StoryKit\/Extensibility"},"sections":[],"references":{"doc://StoryKit/documentation/StoryKit/PredicateRegistry":{"title":"PredicateRegistry","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"PredicateRegistry"}],"navigatorTitle":[{"kind":"identifier","text":"PredicateRegistry"}],"role":"symbol","abstract":[{"type":"text","text":"Registry that maps predicate ids to evaluation closures."}],"url":"\/documentation\/storykit\/predicateregistry","kind":"symbol","type":"topic","identifier":"doc:\/\/StoryKit\/documentation\/StoryKit\/PredicateRegistry"},"doc://StoryKit/documentation/StoryKit":{"identifier":"doc:\/\/StoryKit\/documentation\/StoryKit","title":"StoryKit","abstract":[{"text":"Build rich, data‑driven “choose your own adventure” experiences with a small, composable core and first‑class tooling.","type":"text"}],"kind":"symbol","role":"collection","type":"topic","url":"\/documentation\/storykit"},"doc://StoryKit/documentation/StoryKit/EffectRegistry":{"identifier":"doc:\/\/StoryKit\/documentation\/StoryKit\/EffectRegistry","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"EffectRegistry"}],"navigatorTitle":[{"kind":"identifier","text":"EffectRegistry"}],"url":"\/documentation\/storykit\/effectregistry","title":"EffectRegistry","abstract":[{"text":"Registry that maps effect ids to mutation closures.","type":"text"}],"type":"topic"},"doc://StoryKit/documentation/StoryKit/ActionOutcome":{"title":"ActionOutcome","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"ActionOutcome"}],"type":"topic","abstract":[{"type":"text","text":"Outcome of a performed action."}],"kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"ActionOutcome"}],"url":"\/documentation\/storykit\/actionoutcome","identifier":"doc:\/\/StoryKit\/documentation\/StoryKit\/ActionOutcome"},"doc://StoryKit/documentation/StoryKit/ActionRegistry":{"identifier":"doc:\/\/StoryKit\/documentation\/StoryKit\/ActionRegistry","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"ActionRegistry","kind":"identifier"}],"navigatorTitle":[{"text":"ActionRegistry","kind":"identifier"}],"url":"\/documentation\/storykit\/actionregistry","title":"ActionRegistry","abstract":[{"text":"Registry that maps action ids to action closures.","type":"text"}],"type":"topic"},"doc://StoryKit/documentation/StoryKit/StoryState":{"kind":"symbol","title":"StoryState","url":"\/documentation\/storykit\/storystate","navigatorTitle":[{"text":"StoryState","kind":"identifier"}],"identifier":"doc:\/\/StoryKit\/documentation\/StoryKit\/StoryState","abstract":[{"type":"text","text":"App-defined, codable story state used by the engine."}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"StoryState","kind":"identifier"}],"role":"symbol","type":"topic"}}}